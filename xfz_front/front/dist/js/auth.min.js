function Auth(){this.maskWrapper=$(".mask-wrapper"),this.scrollWrapper=$(".scroll-wrapper")}Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenswitchEvent(),t.listenSigninEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,n=$(".signin-btn"),e=$(".signup-btn"),i=$(".close-btn");n.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),e.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),i.click(function(){t.hideEvent()})},Auth.prototype.listenswitchEvent=function(){var n=this;$(".switch").click(function(){var t=n.scrollWrapper.css("left");(t=parseInt(t))<0?n.scrollWrapper.animate({left:0}):n.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listenSigninEvent=function(){var o=this,t=$(".signin-group"),i=t.find("input[name='telephone']"),r=t.find("input[name='password']"),s=t.find("input[name='remember']");t.find(".submit-btn").click(function(){var t=i.val(),n=r.val(),e=s.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:t,password:n,remember:e?1:0},success:function(t){if(200==t.code)o.hideEvent(),window.location.reload();else{var n=t.message;if("string"==typeof n||n.constructor==String)console.log(n);else for(var e in n){var i=n[e][0];console.log(i)}}},fail:function(t){console.log(t)}})})},$(function(){(new Auth).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
